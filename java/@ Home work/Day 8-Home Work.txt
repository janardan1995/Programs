1.binary search

public class Main {

    public static void main(String[] args) {
	// write your code here
        int a[]={1,2,3,4,5,6,7,8,9};
        int search=7;
        int li=0;
        int hi=a.length-1;
        int mid=li+(hi-li)/2;
        while(li<=hi) {
            if (a[mid] == search) {
                System.out.println(mid);
                break;
            } else if (a[mid] < search) {
                li = mid + 1;
            } else {
                hi=mid-1;
            }
            mid=li+(hi-li)/2;
        }
    }
}
 5	

2.insertion sort

// Java program for implementation of Insertion Sort 

class InsertionSort { 
	/*Function to sort array using insertion sort*/
	void sort(int arr[]) 
	{ 
		int n = arr.length; 
		for (int i = 1; i < n; ++i) { 
			int key = arr[i]; 
			int j = i - 1; 

			/* Move elements of arr[0..i-1], that are 
			greater than key, to one position ahead 
			of their current position */
			while (j >= 0 && arr[j] > key) { 
				arr[j + 1] = arr[j]; 
				j = j - 1; 
			} 
			arr[j + 1] = key; 
		} 
	} 

	/* A utility function to print array of size n*/
	static void printArray(int arr[]) 
	{ 
		int n = arr.length; 
		for (int i = 0; i < n; ++i) 
			System.out.print(arr[i] + " "); 

		System.out.println(); 
	} 

	// Driver method 
	public static void main(String args[]) 
	{ 
		int arr[] = { 12, 11, 13, 5, 6 }; 

		InsertionSort ob = new InsertionSort();  n 
		ob.sort(arr); 

		printArray(arr); 
	} 
} 
3. frequency of a number
